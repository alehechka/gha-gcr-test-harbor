name: Google Cloud Run Deploy
# https://github.com/google-github-actions/setup-gcloud
on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCR_PROJECT }}
  RUN_REGION: ${{ secrets.REGION }}
  SERVICE_NAME: ${{ secrets.SERVICE }}

jobs:
  build:
    name: Test Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Set up Go 1.16
        uses: actions/setup-go@v1
        with:
          go-version: 1.16
        id: go

      - name: Install Dependencies
        run: go get -d -v

      - name: Build
        run: go build -v .

  deploy-gcr:
    name: Deploy to GCR
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Create Docker Tag
        run: echo "IMAGE=gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA" >> $GITHUB_ENV

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCR_SA_KEY }}
          project_id: ${{ secrets.GCR_PROJECT }}
          export_default_credentials: true

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Dockerize
        run: docker build -t ${{ env.IMAGE }} .

      - name: Push Docker image
        run: docker push ${{ env.IMAGE }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@main
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.IMAGE }}
          region: ${{ env.RUN_REGION }}

      - name: Update traffic to latest
        id: update_traffic
        uses: google-github-actions/deploy-cloudrun@main
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.IMAGE }}
          region: ${{ env.RUN_REGION }}
          revision_traffic: LATEST=100

  cleanup-cloud-run:
    name: Cloud Run Revision Cleanup
    needs: deploy-gcr
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCR_SA_KEY }}
          project_id: ${{ secrets.GCR_PROJECT }}
          export_default_credentials: true

      - name: Create Docker Regex Tag
        run: echo "IMAGE_REGX=gcr.io/$PROJECT_ID/$SERVICE_NAME:.*" >> $GITHUB_ENV
        # Use the following regex to instead delete only previous PR inactive revisions
        # echo "IMAGE_REGX=gcr.io/$PROJECT_ID/$SERVICE_NAME:[0-9]+-.*" >> $GITHUB_ENV

      - name: Set Revisions Env Variable
        run: |-
          echo "REVISIONS=`gcloud run revisions list \
            --service "${SERVICE_NAME}" \
            --region "${RUN_REGION}" \
            --filter "spec.containers.image ~ ${IMAGE_REGX}" \
            --format "csv[no-heading](REVISION,ACTIVE)" \
            | awk -F, '$2 != "yes"' \
            | sed 's/,$//' \
            | awk -vORS=, '{ print $1 }' \
            | sed 's/,$//'`" >> $GITHUB_ENV

      - name: Delete unused revision instances
        run: |-
          for revision in $(echo $REVISIONS | sed "s/,/ /g")
          do
            gcloud run revisions delete "${revision}" --region "${RUN_REGION}" --quiet
          done

  cleanup-container-registry:
    name: GCR PR Merge Cleanup
    needs: cleanup-cloud-run
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Create Docker Tags
        run: echo "IMAGE=gcr.io/$PROJECT_ID/$SERVICE_NAME" >> $GITHUB_ENV

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCR_SA_KEY }}
          project_id: ${{ secrets.GCR_PROJECT }}
          export_default_credentials: true

      - name: Get Service Revision images
        run: |-
          gcloud run revisions list \
            --service "$SERVICE_NAME" \
            --region "$RUN_REGION" \
            --format "csv[no-heading](spec.containers.image)" \
            | awk -F: '{print $2}' \
            > image_tags.txt

      - name: Get Container Tags
        run: |-
          gcloud container images list-tags "$IMAGE" \
            --format "csv[no-heading](TAGS)" \
            > tags.txt

      - name: Grep Matches image_tags->tags
        run: |-
          echo "TAGS=`grep -v -f image_tags.txt tags.txt \
          | awk -vORS=, '{ print $1 }' \
          | sed 's/,$//'`" >> $GITHUB_ENV

      - name: Delete unused Container Images
        run: |-
          for TAG in $(echo $TAGS | sed "s/,/ /g")
          do
            gcloud container images delete "${IMAGE}:${TAG}" --force-delete-tags --quiet
          done
